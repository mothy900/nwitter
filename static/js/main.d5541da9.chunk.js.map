{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","update","orderByNweets","collection","orderBy","get","useEffect","autoFocus","src","faTrash","faPencilAlt","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmentREf","ref","child","uid","uuidv4","putString","respons","getDownloadURL","createdAt","Date","now","creatorId","add","maxLength","htmlFor","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","nweets","setNweets","getData","onSnapshot","snapshot","nweetArray","docs","map","marginTop","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","profilePic","setProfilePic","picture","setPicture","getMyNweets","where","profilePicUrl","updateProfile","profilePicREf","profileObj","set","watchProfilePic","changePicture","exists","height","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","Profile","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5541da9.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\n// 여기 있는 모든 FireBase 관련 문서를 전부다 불러올 것이 아닌, export 를 통해 필요한 함수만 가져다 쓴다.\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STROAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\n//function 을 export 해서 필요할 때 한번만 선언되도록   -> App.js\n\nexport const dbService = firebase.firestore();\n// firebase DB 사용\n\nexport const storageService = firebase.storage();\n","import { authService } from \"fbase\";\nimport React, { useState } from \"react\";\n\nconst AuthForm = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [newAccount, setNewAccount] = useState(true);\n  const [error, setError] = useState(\"\");\n  const onChange = (event) => {\n    const {\n      target: { name, value },\n    } = event;\n    if (name === \"email\") {\n      setEmail(value);\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n  const onSubmit = async (event) => {\n    event.preventDefault(); //기본행위(submit)가 실행되는걸 원하지 않을 때 사용 let me handle\n\n    try {\n      let data;\n      if (newAccount) {\n        //create account\n        data = await authService.createUserWithEmailAndPassword(\n          email,\n          password\n        );\n      } else {\n        //log in\n        data = await authService.signInWithEmailAndPassword(email, password);\n      }\n      console.log(data);\n    } catch (error) {\n      console.log(error.message);\n      setError(error.message);\n    }\n  };\n  const toggleAccount = () => setNewAccount((prev) => !prev);\n  return (\n    <>\n      <form onSubmit={onSubmit} className=\"container\">\n        <input\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"Email\"\n          required\n          value={email}\n          onChange={onChange}\n          className=\"authInput\"\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"password\"\n          required\n          value={password}\n          onChange={onChange}\n          className=\"authInput\"\n        />\n        <input\n          type=\"submit\"\n          className=\"authInput authSubmit\"\n          value={newAccount ? \"Create Account\" : \"Sign In\"}\n        />\n\n        {error && <span className=\"authError\">{error}</span>}\n      </form>\n      <span onClick={toggleAccount} className=\"authSwitch\">\n        {newAccount ? \"Sign In\" : \"Create Account\"}\n      </span>\n    </>\n  );\n};\n\nexport default AuthForm;\n","import AuthForm from \"components/AuthForm\";\nimport { authService, firebaseInstance } from \"fbase\";\nimport React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTwitter,\n  faGoogle,\n  faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\n\nconst Auth = () => {\n  const onSocialClick = async (event) => {\n    const {\n      target: { name },\n    } = event;\n    let provider;\n    if (name === \"google\") {\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\n    } else if (name === \"github\") {\n      provider = new firebaseInstance.auth.GithubAuthProvider();\n    }\n    const data = await authService.signInWithPopup(provider);\n    console.log(data);\n  };\n\n  return (\n    <div className=\"authContainer\">\n      <FontAwesomeIcon\n        icon={faTwitter}\n        color={\"#04AAFF\"}\n        size=\"3x\"\n        style={{ marginBottom: 30 }}\n      />\n      <AuthForm />\n      <div className=\"authBtns\">\n        <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\n          Continue with Google <FontAwesomeIcon icon={faGoogle} />\n        </button>\n        <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\n          Continue with Github <FontAwesomeIcon icon={faGithub} />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Auth;\n","import { dbService, storageService } from \"fbase\";\nimport React, { useEffect, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Nweet = ({ nweetObj, isOwner }) => {\n  const [editing, setEditing] = useState(false);\n  const [newNweet, setNewNweet] = useState(nweetObj.text);\n  const onDeleteClick = async () => {\n    const ok = window.confirm(\"Are you sure you want to delete this nweet?\");\n    if (ok) {\n      //delete\n      await dbService.doc(`nweets/${nweetObj.id}`).delete();\n      await storageService.refFromURL(nweetObj.attachmentUrl).delete();\n    }\n  };\n  const toggleEditing = () => setEditing((prev) => !prev);\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    await dbService.doc(`nweets/${nweetObj.id}`).update({\n      text: newNweet,\n    });\n    setEditing(false);\n  };\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewNweet(value);\n  };\n  const orderByNweets = async () => {\n    //내가만듬\n    await dbService.collection(\"nweets\").orderBy(\"createdAt\").get();\n  };\n  useEffect(() => {\n    orderByNweets();\n    //변화가 감지될 때 마다 실행\n  });\n  return (\n    <div className=\"nweet\">\n      {editing ? (\n        <>\n          {isOwner && (\n            <>\n              <form onSubmit={onSubmit} className=\"container nweetEdit\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Edit your Nweet\"\n                  value={newNweet}\n                  required\n                  autoFocus\n                  onChange={onChange}\n                  className=\"formInput\"\n                />\n                <input type=\"submit\" value=\"Update Nweet\" className=\"formBtn\" />\n              </form>\n              <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\n                Cancel\n              </span>\n            </>\n          )}\n        </>\n      ) : (\n        <>\n          <h4>{nweetObj.text}</h4>\n          {nweetObj.attachmentUrl && <img src={nweetObj.attachmentUrl} />}\n          {isOwner && (\n            <div className=\"nweet__actions\">\n              <span onClick={onDeleteClick}>\n                <FontAwesomeIcon icon={faTrash} />\n              </span>\n              <span onClick={toggleEditing}>\n                <FontAwesomeIcon icon={faPencilAlt} />\n              </span>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Nweet;\n","import { dbService, storageService } from \"fbase\";\nimport React, { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst NweetFactory = ({ userObj }) => {\n  const [nweet, setNweet] = useState(\"\");\n  const [attachment, setAttachment] = useState(\"\");\n  const onSubmit = async (event) => {\n    if (nweet === \"\") {\n      return;\n    }\n    event.preventDefault();\n    let attachmentUrl = \"\";\n    if (attachment !== \"\") {\n      const attachmentREf = storageService\n        .ref()\n        .child(`${userObj.uid}/${uuidv4()}`);\n      const respons = await attachmentREf.putString(attachment, \"data_url\");\n      attachmentUrl = await respons.ref.getDownloadURL();\n    }\n    const nweetObj = {\n      text: nweet,\n      createdAt: Date.now(),\n      creatorId: userObj.uid,\n      attachmentUrl,\n    };\n    try {\n      await dbService.collection(\"nweets\").add(nweetObj); //db collection 없으면 생성\n      setNweet(\"\");\n      setAttachment(\"\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNweet(value);\n  };\n  const onFileChange = (event) => {\n    const {\n      target: { files },\n    } = event;\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (finishedEvent) => {\n      const {\n        currentTarget: { result },\n      } = finishedEvent;\n      setAttachment(result);\n    };\n    reader.readAsDataURL(theFile);\n  };\n  const onClearAttachment = () => setAttachment(\"\");\n  return (\n    <form onSubmit={onSubmit} className=\"factoryForm\">\n      <div className=\"factoryInput__container\">\n        <input\n          className=\"factoryInput__input\"\n          value={nweet}\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"What's on your mind?\"\n          maxLength={120}\n        />\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n      </div>\n      <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\n        <span>Add photos</span>\n        <FontAwesomeIcon icon={faPlus} />\n      </label>\n      <input\n        id=\"attach-file\"\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={onFileChange}\n        style={{\n          opacity: 0,\n        }}\n      />\n      {/** preview */}\n      {attachment && (\n        <div className=\"factoryForm__attachment\">\n          <img\n            src={attachment}\n            style={{\n              backgroundImage: attachment,\n            }}\n          />\n          <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n            <span>Remove</span>\n            <FontAwesomeIcon icon={faTimes} />\n          </div>\n        </div>\n      )}\n    </form>\n  );\n};\n\nexport default NweetFactory;\n","import Nweet from \"components/Nweet\";\nimport { dbService } from \"fbase\";\nimport React, { useEffect, useState } from \"react\";\nimport NweetFactory from \"components/NweetFactory\";\n\nconst Home = ({ userObj }) => {\n  const [nweets, setNweets] = useState([]);\n\n  useEffect(() => {\n    const getData = dbService.collection(\"nweets\").onSnapshot((snapshot) => {\n      //snapshot은 db를 바라보면서 변화가 감지되면 실행\n      const nweetArray = snapshot.docs.map((doc) => ({\n        id: doc.id, // 배열 생긴 모습\n        ...doc.data(),\n      }));\n\n      setNweets(nweetArray); // array 에 배열을 넣는다\n      return () => getData();\n    });\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <NweetFactory userObj={userObj} />\n      <div style={{ marginTop: 30 }}>\n        {nweets.map((nweet) => (\n          <Nweet\n            key={nweet.id}\n            nweetObj={nweet}\n            isOwner={nweet.creatorId === userObj.uid}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\nexport default Home;\n\n/**const getNweets = async () => {\n    const dbnweets = await dbService.collection(\"nweets\").get();\n    dbnweets.forEach((document) => {\n      const nweetObject = {\n        ...document.data(), // ...은 data의 내용물, 단순히 풀어서 보여준다.\n        id: document.id,\n      };\n      setNweets((prev) => [nweetObject, ...prev]);\n    });\n  }; */\n","import { authService, dbService, storageService } from \"fbase\";\nimport { useHistory } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport React, { useState, useEffect } from \"react\";\n\nexport default ({ refreshUser, userObj }) => {\n  const history = useHistory();\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n  const [profilePic, setProfilePic] = useState(\"\");\n  const [picture, setPicture] = useState(null);\n  const onLogOutClick = () => {\n    authService.signOut();\n    history.push(\"/\");\n    refreshUser();\n  };\n  const getMyNweets = async () => {\n    await dbService\n      .collection(\"nweets\")\n      .where(\"creatorId\", \"==\", userObj.uid) //user를 필터링 하는 방법 creatorID 와 userObj.uid가 일치하는지 검증\n      .orderBy(\"createdAt\")\n      .get();\n  };\n  const onChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    setNewDisplayName(value);\n  };\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    let profilePicUrl = \"\";\n    if (userObj.displayName !== newDisplayName) {\n      await userObj.updateProfile({ displayName: newDisplayName });\n    }\n    refreshUser();\n\n    if (profilePic !== \"\") {\n      //사진 storage로 업로드, 경로는 profile/userUid 로 업로드! 덮어쓰기 가능\n      const profilePicREf = storageService\n        .ref()\n        .child(`profilePic/${userObj.uid}`);\n      const respons = await profilePicREf.putString(profilePic, \"data_url\");\n      profilePicUrl = await respons.ref.getDownloadURL();\n\n      const profileObj = {\n        createdAt: Date.now(),\n        creatorId: userObj.uid,\n        profilePicUrl,\n      };\n\n      // 저장한 뒤엔 원래 있던 사진을 삭제해야함.\n\n      try {\n        await dbService\n          .collection(\"profilePic\")\n          .doc(`IRQoXujxtcv93a8yILOQ`)\n          .delete(); // 기존에 있던 프로필 사진 삭제\n        //console.log();\n        await dbService\n          .collection(\"profilePic\")\n          .doc(`${userObj.uid}`)\n          .set(profileObj); //db collection 없으면 생성\n        setProfilePic(\"\");\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n  const watchProfilePic = async () => {\n    const changePicture = dbService\n      .collection(\"profilePic\")\n      .doc(`${userObj.uid}`);\n\n    const doc = await changePicture.get();\n    if (!doc.exists) {\n      console.log(\"No such document!\");\n    } else {\n      console.log(\"Document data:\", doc.data());\n    }\n    setPicture(doc.data().profilePicUrl);\n  };\n  useEffect(() => {\n    //변화가 감지될 때 마다 실행\n    getMyNweets();\n    watchProfilePic();\n  });\n\n  const onFileChange = (event) => {\n    const {\n      target: { files },\n    } = event;\n    const theFile = files[0];\n    const reader = new FileReader();\n    reader.onloadend = (finishedEvent) => {\n      const {\n        currentTarget: { result },\n      } = finishedEvent;\n      setProfilePic(result);\n    };\n    reader.readAsDataURL(theFile);\n  };\n  const onClearAttachment = () => setProfilePic(\"\");\n  return (\n    <div className=\"container\">\n      <form onSubmit={onSubmit} className=\"profileForm\">\n        <div className=\"profile_Img\">\n          <img src={`${picture}`}></img>\n        </div>\n        <input\n          onChange={onChange}\n          type=\"text\"\n          autoFocus\n          placeholder=\"Display name\"\n          value={newDisplayName}\n          className=\"formInput\"\n        />\n        <input\n          type=\"submit\"\n          value=\"Update Profile\"\n          className=\"formBtn\"\n          style={{\n            marginTop: 10,\n          }}\n          //onClick={onClearAttachment}\n          // submit 하면 프로파일의 사진 미리보기 삭제\n        />\n        <div className=\"profile-pic-upload\">\n          <label htmlFor=\"profile-pic\" className=\"profilePic_input\">\n            <span>Add photos</span>\n            <FontAwesomeIcon icon={faPlus} />\n          </label>\n        </div>\n        <input\n          id=\"profile-pic\"\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={onFileChange}\n          style={{\n            opacity: 0,\n            height: 0,\n          }}\n        />\n        {/** preview */}\n        {profilePic && (\n          <div className=\"factoryForm__profilePic\">\n            <img\n              src={`${profilePic}`}\n              style={{\n                backgroundImage: profilePic,\n              }}\n            />\n            <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n              <span>Remove</span>\n              <FontAwesomeIcon icon={faTimes} />\n            </div>\n          </div>\n        )}\n      </form>\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n        Log Out\n      </span>\n    </div>\n  );\n};\n\n////////////////////////////////////////////////////\n//collection 자체를 삭제하는 코드 -> collection 내부 요소를 모두 삭제한 뒤 진행한다.\n/*async function deleteCollection(db, collectionPath, batchSize) {\n    const collectionRef = db.collection(collectionPath);\n    const query = collectionRef.orderBy('__name__').limit(batchSize);\n  \n    return new Promise((resolve, reject) => {\n      deleteQueryBatch(db, query, resolve).catch(reject);\n    });\n  }\n  \n  async function deleteQueryBatch(db, query, resolve) {\n    const snapshot = await query.get();\n  \n    const batchSize = snapshot.size;\n    if (batchSize === 0) {\n      // When there are no documents left, we are done\n      resolve();\n      return;\n    }\n  \n    // Delete documents in a batch\n    const batch = db.batch();\n    snapshot.docs.forEach((doc) => {\n      batch.delete(doc.ref);\n    });\n    await batch.commit();\n  \n    // Recurse on the next process tick, to avoid\n    // exploding the stack.\n    process.nextTick(() => {\n      deleteQueryBatch(db, query, resolve);\n    });\n  }*/\n////////////////////////////////////////////////////\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Navigation = ({ userObj }) => (\n  <nav>\n    <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n      <li>\n        <Link to=\"/\" style={{ marginRight: 10 }}>\n          <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\n        </Link>\n      </li>\n      <li>\n        <Link\n          to=\"/profile\"\n          style={{\n            marginLeft: 10,\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            fontSize: 12,\n          }}\n        >\n          <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n          <span style={{ marginTop: 10 }}>\n            {userObj.displayName\n              ? `${userObj.displayName}의 Profile`\n              : \"Profile\"}\n          </span>\n        </Link>\n      </li>\n    </ul>\n  </nav>\n);\n\nexport default Navigation;\n","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Auth from \"../routes/Auth\";\nimport Home from \"../routes/Home\";\nimport Profile from \"../routes/Profile\";\nimport Navigation from \"components/Navigation\";\n\n// navigation 추가 예정\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\n  return (\n    <Router>\n      {isLoggedIn && <Navigation userObj={userObj} />}\n      <Switch>\n        <>\n          {isLoggedIn ? (\n            <div\n              style={{\n                maxWidth: 890,\n                width: \"100%\",\n                margin: \"0 auto\",\n                marginTop: 80,\n                display: \"flex\",\n                justifyContent: \"center\",\n              }}\n            >\n              <Route exact path=\"/\">\n                <Home userObj={userObj} />\n              </Route>\n              <Route exact path=\"/profile\">\n                <Profile userObj={userObj} refreshUser={refreshUser} />\n              </Route>\n            </div>\n          ) : (\n            <>\n              <Route exact path=\"/\">\n                <Auth />\n              </Route>\n            </>\n          )}\n        </>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default AppRouter;\n","import React, { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      // user의 상태를 계속 지켜보고 있는 Event Listener\n      if (user) {\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObj(null);\n      }\n\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n        />\n      ) : (\n        \"Initializing ...\"\n      )}\n      <div className=\"footer\">\n        <footer className=\"footer-print\">\n          &copy; {new Date().getFullYear()} Nwitter\n        </footer>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}